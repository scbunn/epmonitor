{% set cpu = stats['cpu'] %}
{% set memory = stats['memory'] %}
{% set network = stats['network'] %}
{% set stack = stats['stack'] %}

{% extends "base.html.j2" %}
{% block content %}
<section class="section section-stats center">
    <div class="row">
        <div class="col s12 m6 l3">
            <div class="card-panel deep-orange lighten-2 grey-text text-darken-4 center">
                <i class="fas fa-microchip fa-lg"></i>
                <h5>CPU Utilization %</h5>
                <h3 class="count">{{ cpu['utilization'] }}</h3>
                <div class="progress grey lighten-1">
                    <div class="determinate white" style="width: {{ cpu['utilization'] }}%;">
                    </div>
                </div>
            </div>
        </div><!-- end of stat panel: CPU Util -->
        <div class="col s12 m6 l3">
            <div class="card-panel deep-orange lighten-2 grey-text text-darken-4 center">
                <i class="fas fa-memory fa-lg"></i>
                <h5>Free Memory (MB)</h5>
                <h3 class="count">{{ '%0.2f' | format(memory['free']|megabytes) }}</h3>
                <div class="progress grey lighten-1">
                    <div class="determinate white" style="width: {{ memory['used_pct'] }}%;">
                    </div>
                </div>
            </div>
        </div><!-- end of stat panel: Memory -->
        <div class="col s12 m6 l3">
            <div class="card-panel deep-orange lighten-2 grey-text text-darken-4 center">
                <i class="fas fa-stream fa-lg"></i>
                <h5>Thread Count</h5>
                <h3 class="count">{{ stack['app_thread_count'] }}</h3>
                <div class="progress grey lighten-1">
                    <div class="determinate white" style="width: 0%;">
                    </div>
                </div>
            </div>
        </div><!-- end of stat panel: Thread Count -->
        <div class="col s12 m6 l3">
            <div class="card-panel deep-orange lighten-2 grey-text text-darken-4 center">
                <i class="fas fa-chart-line fa-lg"></i>
                <h5>Monitored Endpoints</h5>
                <h3 class="count">{{ endpoint_count }}</h3>
                <div class="progress grey lighten-1">
                    <div class="determinate white" style="width: 0%;">
                    </div>
                </div>
            </div>
        </div><!-- end of stat panel: Monitor Count -->
    </div>
</section><!-- overview stats section -->


<section class="section section-epmonitor center">
    <div class="row">
        <div class="col s12 m4 l2">
            <div class="card-panel deep-orange-text text-darken-4 center">
                <h5>PID</h5>
                <h3 class="count grey-text text-darken-4">{{ stack['pid'] }}</h3>
            </div>
        </div><!-- end of stat panel: PID -->
        <div class="col s12 m4 l2">
            <div class="card-panel deep-orange-text text-darken-4 center">
                <h5>Max Threads</h5>
                <h3 class="count grey-text text-darken-4">{{ stack['rm_max_threads'] }}</h3>
            </div>
        </div><!-- end of stat panel: Max Thread Count -->
        <div class="col s12 m4 l2">
            <div class="card-panel deep-orange-text text-darken-4 center">
                <h5>Running Threads</h5>
                <h3 class="count grey-text text-darken-4">{{ stack['rm_running_threads'] }}</h3>
            </div>
        </div><!-- end of stat panel: Running Threads -->
        <div class="col s12 m4 l2">
            <div class="card-panel deep-orange-text text-darken-4 center">
                <h5>Queue</h5>
                <h3 class="count grey-text text-darken-4">{{ stack['queue_size'] }}</h3>
            </div>
        </div><!-- end of stat panel: Queue Size -->
        <div class="col s12 m4 l2">
            <div class="card-panel deep-orange-text text-darken-4 center">
                <h5>Connections</h5>
                <h3 class="count grey-text text-darken-4">{{ network['connections_total'] }}</h3>
            </div>
        </div><!-- end of stat panel: Connection Count -->
        <div class="col s12 m4 l2">
            <div class="card-panel deep-orange-text text-darken-4 center">
                <h5>Memory (MB)</h5>
                <h3 class="count grey-text text-darken-4">{{ '%0.2f' |format(memory['consumed_by_stack']|megabytes) }}</h3>
            </div>
        </div><!-- end of stat panel: App Memory -->

    </div>
</section>

<section class="section section-system">
    <div class="row">
        <div class="col s12 m6 l6">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">CPU</span>
                    <canvas id="chart-cpu-utilization" height="100"></canvas>
                </div>
            </div>
        </div>
        <div class="col s12 m6 l6">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">Memory</span>
                    <canvas id="chart-system-memory" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>
</section><!-- system stats section -->

<section class="section section-system">
    <div class="row">
        <div class="col s12 m6 l6">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">Network IO Total</span>
                    <canvas id="chart-network-utilization" height="100"></canvas>
                </div>
            </div>
        </div>
        <div class="col s12 m6 l6">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">Network IO per second</span>
                    <canvas id="chart-network-util-ps" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>
</section><!-- network stats section -->


<section class="section section-stat-lists">
    <div class="row">
        <div class="col s12 l6 m6">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">Network Connections</span>
                    <table class="striped grey-text text-darken-4">
                        <thead>
                            <tr>
                                <th>Local Address</th>
                                <th>Remote Address</th>
                                <th>State</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for conn in network['connections'] %}
                            <tr>
                                <td>{{ conn.laddr.ip }}:{{ conn.laddr.port }}</td>
                                {% if conn.raddr %}
                                <td>{{ conn.raddr.ip }}:{{ conn.raddr.port }}</td>
                                {% else %}
                                <td></td>
                                {% endif %}
                                <td>{{ conn.status }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col s12 m6">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">Application Threads</span>
                    <table class="striped grey-text text-darken-4">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>CPU (User)</th>
                                <th>CPU (System)</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for t in stack['stack_threads'] %}
                            <tr>
                                <td>{{ t.id }}</td>
                                <td>{{ t.user_time }}</td>
                                <td>{{ t.system_time }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col s12 m6 right">
            <div class="card">
                <div class="card-content">
                    <span class="card-title deep-orange-text text-darken-4">RequestManager Threads</span>
                    <table class="striped grey-text text-darken-4">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Endpoint</th>
                                <th>Frequency</th>
                                <th>Alive</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for t in stack['rm_threads'] %}
                            <tr>
                                <td>{{ t.name }}</td>
                                <td>{{ t.status }}</td>
                                <td>{{ t.endpoint }}</td>
                                <td>{{ t.frequency }}</td>
                                <td>
                                    <i class="{% if t[2] %}fas fa-check-circle{% else %}fas fa-times-circle{% endif %}"></i>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}


{% block javascript %}
{{ super() }}
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>

<script type="text/javascript">
    $(document).ready(function() {

        // Stat Counter Animation
        $('.count').each(function() {
            $(this).prop('Counter', 0).animate({
                Counter: $(this).text()
            }, {
                duration: 1000,
                easing: 'swing',
                step: function(now) {
                    $(this).text(Math.ceil(now));
                }
            });
        });

    });

function countStats() {
    $('.count').each(function() {
        $(this).prop('Counter', 0).animate({
            Counter: $(this).text()
        }, {
            duration: 1000,
            easing: 'swing',
            step: function(now) {
                $(this).text(Math.ceil(now));
            }
        });
    });
}

</script>

<!-- ChartJS Graphs -->

<script type="text/javascript">
    var ctx_net_ps = document.getElementById("chart-network-util-ps").getContext('2d');

    var networkChartPS = new Chart(ctx_net_ps, {
        type: 'line',
        data: {
            datasets: [
                {
                    label: 'recieved/s',
                    fill: false,
                    backgroundColor: 'rgba(254, 2, 41, 0.8)',
                    borderColor: 'rgba(254, 2, 41, 1)',
                    data: [
                        {% for dp, ts in network['bytes_recv_s'] %}
                        { y: {{ dp|megabytes }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                },
                {
                    label: 'sent/s',
                    fill: false,
                    backgroundColor: 'rgba(255, 208, 0, 0.8)',
                    borderColor: 'rgba(255, 208, 0, 1)',
                    data: [
                        {% for dp, ts in network['bytes_sent_s'] %}
                        { y: {{ dp|megabytes }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                xAxes: [{
                    display: true,
                    type: 'time',
                    time: {
                        unit: 'second'
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'time'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: "megabytes"
                    }
                }]
            }

        }
    });
</script>
    
<script type="text/javascript">
    var ctx_net_chart = document.getElementById("chart-network-utilization").getContext('2d');
    var networkChart = new Chart(ctx_net_chart, {
        type: 'line',
        data: {
            datasets: [
                {
                    label: 'recieved',
                    fill: false,
                    backgroundColor: 'rgba(254, 2, 41, 0.8)',
                    borderColor: 'rgba(254, 2, 41, 1)',
                    data: [
                        {% for dp, ts in network['bytes_recv'] %}
                        { y: {{ dp|megabytes }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                },
                {
                    label: 'Sent',
                    fill: false,
                    backgroundColor: 'rgba(255, 208, 0, 0.8)',
                    borderColor: 'rgba(255, 208, 0, 1)',
                    data: [
                        {% for dp, ts in network['bytes_sent'] %}
                        { y: {{ dp|megabytes }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                xAxes: [{
                    display: true,
                    type: 'time',
                    time: {
                        unit: 'second'
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'time'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: "megabytes"
                    }
                }]
            }
        }
    });
</script>

<script type="text/javascript">

    var ctx_mem_chart = document.getElementById("chart-system-memory").getContext('2d');
    var memoryChart = new Chart(ctx_mem_chart, {
        type: 'line',
        data: {
            datasets: [
                {
                    label: 'total',
                    fill: false,
                    backgroundColor: 'rgba(254, 2, 41, 0.8)',
                    borderColor: 'rgba(254, 2, 41, 1)',
                    data: [
                        {% for dp, ts in memory['total'] %}
                        { y: {{ dp|megabytes }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                },
                {
                    label: 'available',
                    fill: true,
                    backgroundColor: 'rgba(255, 208, 0, 0.8)',
                    borderColor: 'rgba(255, 208, 0, 1)',
                    data: [
                        {% for dp, ts in memory['available'] %}
                        { y: {{ dp|megabytes }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                xAxes: [{
                    display: true,
                    type: 'time',
                    time: {
                        unit: 'second'
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'time'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: "megabytes"
                    }
                }]
            }
        }
    });
</script>

<script type="text/javascript">
    var ctx_cpu_chart = document.getElementById("chart-cpu-utilization").getContext('2d');
    var cpuChart = new Chart(ctx_cpu_chart, {
        type: 'line',
        data: {
            datasets: [
                {
                    label: 'User',
                    fill: false,
                    backgroundColor: 'rgba(254, 2, 41, 0.8)',
                    borderColor: 'rgba(254, 2, 41, 1)',
                    data: [
                        {% for dp, ts in cpu['user'] %}
                        { y: {{ dp }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                },
                {
                    label: 'System',
                    fill: false,
                    backgroundColor: 'rgba(255, 208, 0, 0.8)',
                    borderColor: 'rgba(255, 208, 0, 1)',
                    data: [
                        {% for dp, ts in cpu['system'] %}
                        { y: {{ dp }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                },
                {
                    label: 'Idle',
                    fill: false,
                    backgroundColor: 'rgba(240, 108, 0, 0.8)',
                    borderColor: 'rgba(240, 108, 0, 1)',
                    data: [
                        {% for dp, ts in cpu['idle'] %}
                        { y: {{ dp }}, x: new Date({{ ts }} * 1000)},
                        {% endfor %}
                    ]
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                xAxes: [{
                    display: true,
                    type: 'time',
                    time: {
                        unit: 'second'
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'time'
                    }
                }],
                yAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'percentage'
                    }
                }]
            }
        }
    });
</script>

{% endblock %}
